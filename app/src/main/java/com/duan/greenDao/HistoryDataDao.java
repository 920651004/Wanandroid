package com.duan.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.duan.wanandroid.base.db.HistoryData;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_DATA".
*/
public class HistoryDataDao extends AbstractDao<HistoryData, Long> {

    public static final String TABLENAME = "HISTORY_DATA";

    /**
     * Properties of entity HistoryData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property Date = new Property(1, Long.class, "Date", false, "DATE");
        public final static Property Data = new Property(2, String.class, "Data", false, "DATA");
        public final static Property DTest = new Property(3, String.class, "DTest", false, "DTEST");
        public final static Property Num = new Property(4, int.class, "num", false, "NUM");
    }


    public HistoryDataDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"DATE\" INTEGER," + // 1: Date
                "\"DATA\" TEXT," + // 2: Data
                "\"DTEST\" TEXT," + // 3: DTest
                "\"NUM\" INTEGER NOT NULL );"); // 4: num
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistoryData entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        Long Date = entity.getDate();
        if (Date != null) {
            stmt.bindLong(2, Date);
        }
 
        String Data = entity.getData();
        if (Data != null) {
            stmt.bindString(3, Data);
        }
 
        String DTest = entity.getDTest();
        if (DTest != null) {
            stmt.bindString(4, DTest);
        }
        stmt.bindLong(5, entity.getNum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistoryData entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        Long Date = entity.getDate();
        if (Date != null) {
            stmt.bindLong(2, Date);
        }
 
        String Data = entity.getData();
        if (Data != null) {
            stmt.bindString(3, Data);
        }
 
        String DTest = entity.getDTest();
        if (DTest != null) {
            stmt.bindString(4, DTest);
        }
        stmt.bindLong(5, entity.getNum());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HistoryData readEntity(Cursor cursor, int offset) {
        HistoryData entity = new HistoryData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // Date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Data
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // DTest
            cursor.getInt(offset + 4) // num
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistoryData entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setData(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDTest(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNum(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HistoryData entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HistoryData entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HistoryData entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
