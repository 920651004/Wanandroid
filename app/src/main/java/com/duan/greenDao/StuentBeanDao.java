package com.duan.greenDao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.duan.wanandroid.bean.StuentBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUENT_BEAN".
*/
public class StuentBeanDao extends AbstractDao<StuentBean, Long> {

    public static final String TABLENAME = "STUENT_BEAN";

    /**
     * Properties of entity StuentBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Sid = new Property(0, Long.class, "sid", true, "_id");
        public final static Property Mid = new Property(1, Long.class, "mid", false, "MID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
    }

    private Query<StuentBean> muchBean_StudentsQuery;

    public StuentBeanDao(DaoConfig config) {
        super(config);
    }
    
    public StuentBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUENT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: sid
                "\"MID\" INTEGER," + // 1: mid
                "\"NAME\" TEXT);"); // 2: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUENT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StuentBean entity) {
        stmt.clearBindings();
 
        Long sid = entity.getSid();
        if (sid != null) {
            stmt.bindLong(1, sid);
        }
 
        Long mid = entity.getMid();
        if (mid != null) {
            stmt.bindLong(2, mid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StuentBean entity) {
        stmt.clearBindings();
 
        Long sid = entity.getSid();
        if (sid != null) {
            stmt.bindLong(1, sid);
        }
 
        Long mid = entity.getMid();
        if (mid != null) {
            stmt.bindLong(2, mid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StuentBean readEntity(Cursor cursor, int offset) {
        StuentBean entity = new StuentBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // sid
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // mid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StuentBean entity, int offset) {
        entity.setSid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StuentBean entity, long rowId) {
        entity.setSid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StuentBean entity) {
        if(entity != null) {
            return entity.getSid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StuentBean entity) {
        return entity.getSid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "students" to-many relationship of MuchBean. */
    public List<StuentBean> _queryMuchBean_Students(Long mid) {
        synchronized (this) {
            if (muchBean_StudentsQuery == null) {
                QueryBuilder<StuentBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Mid.eq(null));
                muchBean_StudentsQuery = queryBuilder.build();
            }
        }
        Query<StuentBean> query = muchBean_StudentsQuery.forCurrentThread();
        query.setParameter(0, mid);
        return query.list();
    }

}
